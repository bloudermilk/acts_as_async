{"name":"acts_as_async","body":"# ActsAsAsync [![Build Status](https://secure.travis-ci.org/bloudermilk/acts_as_async.png?branch=master)][travis] [![Dependency Status](https://gemnasium.com/bloudermilk/acts_as_async.png?travis)][gemnasium]\r\n\r\nActsAsAsync is an ActiveRecord extension that provides your models with\r\neasy-to-use Resque helpers.\r\n\r\n[travis]: http://travis-ci.org/bloudermilk/acts_as_async\r\n[gemnasium]: https://gemnasium.com/bloudermilk/acts_as_async\r\n\r\n\r\n## Installation\r\n\r\nInstalling ActsAsAsync is as simple as adding it to your Gemfile:\r\n\r\n```ruby\r\ngem \"acts_as_async\"\r\n```\r\n\r\n\r\n## Usage\r\n\r\nActsAsAsync aims to be as simple as possible to use. Including it in your model\r\nis as easy as:\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  acts_as_async\r\nend\r\n```\r\n\r\n### Basic usage\r\n\r\nActsAsAsync adds three instance methods to your model that you can use to async\r\nany other instance method:\r\n\r\n```ruby\r\npost = Post.create(:body => \"Wow, acts_as_async is neat!\")\r\n\r\n# Self-destruct as soon as possible\r\npost.async(:destroy)\r\n\r\n# Self-destruct at this time tomorrow\r\npost.async_at(Time.now + 1.day, :destroy)\r\n\r\n# Self-destruct in 10 minutes\r\npost.async_in(10.minutes, :destroy)\r\n```\r\n\r\nIt also adds three identical class methods:\r\n\r\n```ruby\r\nPost.async(:destroy_all)\r\nPost.async_at(1.day.from_now, :destroy_all)\r\nPost.async_in(10.minutes, :destroy_all)\r\n```\r\n\r\n### Dynamic methods\r\n\r\nIn addition to the helper methods above, ActsAsAsync supports dynamic methods\r\nfor any existing method on your model. For example:\r\n\r\n```ruby\r\nclass Audiobook < ActiveRecord::Base\r\n  acts_as_async\r\n\r\n  def transcribe\r\n\t# Some long-running logic here\r\n  end\r\n\r\n  def read!\r\n\t# Computers like to read too!\r\n  end\r\n\r\n  def paint(color)\r\n\t# I don't know why you'd paint a book...\r\n  end\r\nend\r\n\r\nbook = Audiobook.first\r\n\r\n# Transcribe the book as soon as possible\r\nbook.async_transcribe\r\n\r\n# Read the book at this time tomorrow\r\nbook.async_read_at!(Time.now + 1.day)\r\n\r\n# Paint the book blue in a couple years\r\nbook.async_paint_in(2.years, \"blue\")\r\n```\r\n\r\n### Additional notes\r\n\r\n  * You can pass any number of additional arguments to async'd methods so long\r\n    as they can be serialized into JSON\r\n  * Adding acts_as_async to your Gemfile automatically loads both Resque and\r\n    Resque-scheduler's rake tasks. This means you can use both\r\n    `$ rake resque:work` and `$ rake resque:scheduler` right out of the box.\r\n  * By deafult, each model will add tasks to a queue named \"default\". You can\r\n\tpass the `:queue` option to `acts_as_async` to specify a different queue.\r\n  * Dynamic methods support names with exclamation points but not question\r\n    marks. This was a design decision to discourage misuse of the question mark\r\n    in method names. If you absolutely must async a method with a question mark,\r\n    just use one of the `async :method` helpers.\r\n\r\n\r\n## Everything else...\r\n\r\nActsAsAsync is simply a thin layer on top of [Resque][resque] and\r\n[Resque-scheduler][resque_scheduler]. To learn how to configure your redis\r\nconnection, run workers, view the web interface, and more visit their home\r\npages.\r\n\r\n[resque]: https://github.com/defunkt/resque\r\n[resque_scheduler]: https://github.com/bvandenbos/resque-scheduler\r\n\r\n\r\n## Compatibility\r\n\r\nActsAsAsync is tested against the following Rubies: MRI 1.8.7, MRI 1.9.2,\r\nMRI 1.9.3, Rubinius 2.0, and JRuby.\r\n\r\n\r\n## License\r\n\r\nActsAsAsync is released under the MIT license. See the LICENSE file for more\r\ninfo.","tagline":"ActsAsAsync is an ActiveRecord extension that provides your models with easy-to-use Resque helpers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}